@page "/profile/{Username}"
@using BlogSpace.Client.Services
@using BlogSpace.Client.Components.Blog
@using System.Security.Claims
@inject ISupabaseService SupabaseService
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService

<div class="space-y-8">
    @if (loading)
    {
        <div class="animate-pulse">
            <div class="flex items-center space-x-6">
                <div class="w-32 h-32 bg-gray-300 rounded-full"></div>
                <div class="space-y-3 flex-1">
                    <div class="h-6 bg-gray-300 rounded w-1/4"></div>
                    <div class="h-4 bg-gray-300 rounded w-1/3"></div>
                    <div class="h-4 bg-gray-300 rounded w-1/2"></div>
                </div>
            </div>
        </div>
    }
    else if (profile == null)
    {
        <div class="text-center py-12">
            <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-user-slash h-12 w-12 text-gray-400"></i>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Profile not found</h3>
            <p class="text-gray-600">The user you're looking for doesn't exist.</p>
        </div>
    }
    else
    {
        <!-- Profile Header -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
            <div class="flex items-start space-x-6">
                <!-- Avatar -->
                <div class="w-32 h-32 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    @if (!string.IsNullOrEmpty(profile.AvatarUrl))
                    {
                        <img src="@profile.AvatarUrl"
                             alt="@profile.FullName"
                             class="w-32 h-32 rounded-full object-cover" />
                    }
                    else
                    {
                        <i class="fas fa-user h-16 w-16 text-white"></i>
                    }
                </div>

                <!-- Info -->
                <div class="flex-1">
                    <div class="flex items-center justify-between">
                        <div>
                            <h1 class="text-2xl font-bold text-gray-900">@profile.FullName</h1>
                            <p class="text-gray-600">@@@profile.Username</p>
                        </div>
                        <div>
                            @if (isOwnProfile)
                            {
                                <a href="/settings"
                                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors">
                                    <i class="fas fa-cog mr-2"></i>
                                    Edit Profile
                                </a>
                            }
                            else
                            {
                                <button @onclick="ToggleFollow"
                                        class="@GetFollowButtonClass()">
                                    <i class="@GetFollowIconClass() mr-2"></i>
                                    @(following ? "Following" : "Follow")
                                </button>
                            }
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(profile.Bio))
                    {
                        <p class="mt-4 text-gray-600">@profile.Bio</p>
                    }

                    <div class="flex items-center space-x-6 mt-6">
                        <div class="flex items-center space-x-1">
                            <i class="fas fa-calendar h-4 w-4 text-gray-400"></i>
                            <span class="text-sm text-gray-600">
                                Joined @profile.CreatedAt.ToString("MMMM yyyy")
                            </span>
                        </div>
                        @if (!string.IsNullOrEmpty(profile.Location))
                        {
                            <div class="flex items-center space-x-1">
                                <i class="fas fa-map-marker-alt h-4 w-4 text-gray-400"></i>
                                <span class="text-sm text-gray-600">@profile.Location</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(profile.Website))
                        {
                            <a href="@profile.Website"
                               target="_blank"
                               class="flex items-center space-x-1 text-blue-600 hover:text-blue-700">
                                <i class="fas fa-link h-4 w-4"></i>
                                <span class="text-sm">Website</span>
                            </a>
                        }
                    </div>

                    <div class="flex items-center space-x-6 mt-6">
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900">@profile.PostsCount</div>
                            <div class="text-sm text-gray-600">Posts</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900">@profile.FollowersCount</div>
                            <div class="text-sm text-gray-600">Followers</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900">@profile.FollowingCount</div>
                            <div class="text-sm text-gray-600">Following</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Posts -->
        <div class="space-y-6">
            @if (!posts.Any())
            {
                <div class="text-center py-12 bg-white rounded-lg shadow-sm border border-gray-200">
                    <i class="fas fa-file-alt h-12 w-12 text-gray-400 mx-auto mb-4"></i>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">No posts yet</h3>
                    <p class="text-gray-600">
                        @(isOwnProfile ? "Write your first blog post!" : "This user hasn't written any posts yet.")
                    </p>
                    @if (isOwnProfile)
                    {
                        <a href="/write"
                           class="inline-block mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors">
                            Create New Post
                        </a>
                    }
                </div>
            }
            else
            {
                @foreach (var post in posts)
                {
                    <PostCard Post="post" />
                }
            }
        </div>
    }
</div>

@code {
    [Parameter] public string Username { get; set; } = null!;

    private UserProfile? profile;
    private List<Post> posts = new();
    private bool loading = true;
    private bool following;
    private bool isOwnProfile;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (profile?.Username != Username)
        {
            await LoadProfile();
        }
    }

    private async Task LoadProfile()
    {
        try
        {
            loading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            
            profile = await SupabaseService.GetUserProfile(Username);
            if (profile != null)
            {
                isOwnProfile = currentUser.Identity?.IsAuthenticated == true &&
                              currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value == profile.Id;
                
                posts = await SupabaseService.GetUserPosts(profile.Id);
                following = await SupabaseService.IsFollowing(profile.Id);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading profile: {ex.Message}");
            ToastService.ShowError("Failed to load profile");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ToggleFollow()
    {
        if (profile == null) return;

        try
        {
            if (following)
            {
                await SupabaseService.Unfollow(profile.Id);
                profile.FollowersCount--;
            }
            else
            {
                await SupabaseService.Follow(profile.Id);
                profile.FollowersCount++;
            }
            following = !following;
            ToastService.ShowSuccess(following ? "Following user" : "Unfollowed user");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling follow: {ex.Message}");
            ToastService.ShowError("Failed to update follow status");
        }
    }

    private string GetFollowButtonClass()
    {
        return following
            ? "inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
            : "inline-flex items-center px-4 py-2 border border-transparent rounded-lg text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition-colors";
    }

    private string GetFollowIconClass()
    {
        return following ? "fas fa-user-check" : "fas fa-user-plus";
    }
} 