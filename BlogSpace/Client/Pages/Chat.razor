@page "/chat"
@using BlogSpace.Client.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Authorization
@inject IGeminiService GeminiService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="h-screen flex flex-col bg-gray-50">
    <!-- Header -->
    <div class="bg-white border-b border-gray-200 p-4">
        <h1 class="text-xl font-semibold text-gray-900">AI Writing Assistant</h1>
        <p class="text-sm text-gray-600">Powered by Google's Gemini AI</p>
    </div>

    <!-- Chat Messages -->
    <div class="flex-1 overflow-y-auto p-4 space-y-4" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="@GetMessageContainerClass(message.IsUser)">
                <div class="@GetMessageClass(message.IsUser)">
                    @if (!message.IsUser)
                    {
                        <div class="flex items-center space-x-2 mb-2">
                            <i class="fas fa-robot text-blue-600"></i>
                            <span class="font-medium text-gray-900">AI Assistant</span>
                        </div>
                    }
                    <div class="prose prose-sm max-w-none">
                        @((MarkupString)FormatMessage(message.Content))
                    </div>
                    <div class="text-xs text-gray-500 mt-1">
                        @message.Timestamp.ToLocalTime().ToString("t")
                    </div>
                </div>
            </div>
        }
        @if (isTyping)
        {
            <div class="flex justify-start">
                <div class="bg-gray-100 rounded-lg p-4 max-w-[75%]">
                    <div class="flex space-x-2">
                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Quick Actions -->
    <div class="bg-white border-t border-gray-200 p-4">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-2 mb-4">
            <button @onclick='() => HandleQuickAction("Generate blog ideas")'
                    class="text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <i class="fas fa-lightbulb text-yellow-500 mb-2"></i>
                <h3 class="font-medium text-gray-900">Blog Ideas</h3>
                <p class="text-sm text-gray-600">Get creative topic suggestions</p>
            </button>
            <button @onclick='() => HandleQuickAction("Help me improve my writing")'
                    class="text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <i class="fas fa-pencil-alt text-blue-500 mb-2"></i>
                <h3 class="font-medium text-gray-900">Writing Tips</h3>
                <p class="text-sm text-gray-600">Get writing improvement tips</p>
            </button>
            <button @onclick='() => HandleQuickAction("Suggest SEO keywords")'
                    class="text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <i class="fas fa-search text-green-500 mb-2"></i>
                <h3 class="font-medium text-gray-900">SEO Keywords</h3>
                <p class="text-sm text-gray-600">Get keyword suggestions</p>
            </button>
            <button @onclick='() => HandleQuickAction("Help me with content structure")'
                    class="text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <i class="fas fa-list text-purple-500 mb-2"></i>
                <h3 class="font-medium text-gray-900">Content Structure</h3>
                <p class="text-sm text-gray-600">Get outline suggestions</p>
            </button>
        </div>
    </div>

    <!-- Input -->
    <div class="bg-white border-t border-gray-200 p-4">
        <form @onsubmit="HandleSubmit" class="flex space-x-4">
            <input type="text"
                   @bind="input"
                   @bind:event="oninput"
                   placeholder="Type your message..."
                   class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                   disabled="@isTyping" />
            <button type="submit"
                    disabled="@(isTyping || string.IsNullOrWhiteSpace(input))"
                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50">
                <i class="fas fa-paper-plane"></i>
            </button>
        </form>
    </div>
</div>

@code {
    private List<Message> messages = new()
    {
        new Message
        {
            Content = "Hello! I'm your AI-powered writing assistant, powered by Google's Gemini AI. I can help you with blog writing, content generation, SEO optimization, and much more. What would you like to work on today?",
            IsUser = false,
            Timestamp = DateTime.UtcNow
        }
    };

    private string input = string.Empty;
    private bool isTyping;
    private ElementReference messagesContainer;

    private class Message
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }

    private string GetMessageContainerClass(bool isUser)
    {
        return isUser ? "flex justify-end" : "flex justify-start";
    }

    private string GetMessageClass(bool isUser)
    {
        return isUser
            ? "bg-blue-600 text-white rounded-lg p-4 max-w-[75%]"
            : "bg-gray-100 text-gray-900 rounded-lg p-4 max-w-[75%]";
    }

    private string FormatMessage(string content)
    {
        // Convert markdown to HTML
        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build();

        return Markdown.ToHtml(content, pipeline);
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(input) || isTyping)
            return;

        var userMessage = new Message
        {
            Content = input.Trim(),
            IsUser = true,
            Timestamp = DateTime.UtcNow
        };

        messages.Add(userMessage);
        input = string.Empty;
        isTyping = true;
        StateHasChanged();

        try
        {
            string response;
            if (userMessage.Content.Contains("blog ideas", StringComparison.OrdinalIgnoreCase))
            {
                var topic = userMessage.Content.Replace("blog ideas", "", StringComparison.OrdinalIgnoreCase).Trim();
                var ideas = await GeminiService.GenerateBlogIdeas(topic);
                response = $"Here are some blog post ideas about \"{topic}\":\n\n" +
                          string.Join("\n\n", ideas.Select((idea, i) => $"{i + 1}. {idea}")) +
                          "\n\nWould you like me to help you develop any of these ideas further?";
            }
            else if (userMessage.Content.Contains("improve", StringComparison.OrdinalIgnoreCase))
            {
                response = await GeminiService.ImproveBlogContent(userMessage.Content, "make it more engaging and professional");
            }
            else if (userMessage.Content.Contains("seo", StringComparison.OrdinalIgnoreCase) ||
                     userMessage.Content.Contains("keywords", StringComparison.OrdinalIgnoreCase))
            {
                var keywords = await GeminiService.GenerateSEOKeywords("Sample Title", userMessage.Content);
                response = $"Here are some relevant SEO keywords:\n\n" +
                          string.Join("\n", keywords.Select(k => $"- {k}"));
            }
            else
            {
                response = await GeminiService.GetChatResponse(userMessage.Content);
            }

            messages.Add(new Message
            {
                Content = response,
                IsUser = false,
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error getting AI response: {ex.Message}");
            messages.Add(new Message
            {
                Content = "I apologize, but I encountered an error processing your request. Please try again.",
                IsUser = false,
                Timestamp = DateTime.UtcNow
            });
        }
        finally
        {
            isTyping = false;
            StateHasChanged();
        }
    }

    private async Task HandleQuickAction(string action)
    {
        input = action;
        await HandleSubmit();
    }
} 