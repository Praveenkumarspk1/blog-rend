@page "/settings"
@using BlogSpace.Client.Services
@using BlogSpace.Client.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@inject ISupabaseService SupabaseService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Settings</h1>
        <p class="text-gray-600 mt-2">Manage your account settings and preferences</p>
    </div>

    @if (loading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (profile == null)
    {
        <div class="text-center py-12">
            <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-exclamation-circle h-12 w-12 text-gray-400"></i>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Profile not found</h3>
            <p class="text-gray-600">Unable to load your profile information.</p>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Navigation -->
            <div class="lg:col-span-1">
                <nav class="space-y-1">
                    <button @onclick="SetProfileTab"
                            class="@GetTabClass(activeTab == "profile")">
                        <i class="fas fa-user mr-3"></i>
                        Profile
                    </button>
                    <button @onclick="SetAccountTab"
                            class="@GetTabClass(activeTab == "account")">
                        <i class="fas fa-shield-alt mr-3"></i>
                        Account
                    </button>
                    <button @onclick="SetNotificationsTab"
                            class="@GetTabClass(activeTab == "notifications")">
                        <i class="fas fa-bell mr-3"></i>
                        Notifications
                    </button>
                </nav>
            </div>

            <!-- Content -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    @if (activeTab == "profile")
                    {
                        <div>
                            <h2 class="text-xl font-semibold mb-6">Profile Settings</h2>
                            <EditForm Model="profile" OnValidSubmit="SaveProfile">
                                <DataAnnotationsValidator />
                                <div class="space-y-6">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                                        <InputText @bind-Value="profile.FullName" 
                                                 class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Username</label>
                                        <InputText @bind-Value="profile.Username" 
                                                 class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Bio</label>
                                        <InputTextArea @bind-Value="profile.Bio" 
                                                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                                     rows="3" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Avatar URL</label>
                                        <InputText @bind-Value="profile.AvatarUrl" 
                                                 class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                                    </div>
                                    <div class="flex justify-end">
                                        <button type="submit" 
                                                class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors">
                                            Save Changes
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    }
                    else if (activeTab == "account")
                    {
                        <div>
                            <h2 class="text-xl font-semibold mb-6">Account Settings</h2>
                            <div class="space-y-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                    <input type="email" value="@profile.Email" disabled 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500" />
                                    <p class="text-sm text-gray-500 mt-1">Email cannot be changed</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Member Since</label>
                                    <input type="text" value="@profile.CreatedAt.ToString("MMMM yyyy")" disabled 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500" />
                                </div>
                                <div class="border-t pt-6">
                                    <h3 class="text-lg font-medium text-red-600 mb-4">Danger Zone</h3>
                                    <button @onclick="DeleteAccount" 
                                            class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors">
                                        Delete Account
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else if (activeTab == "notifications")
                    {
                        <div>
                            <h2 class="text-xl font-semibold mb-6">Notification Settings</h2>
                            <div class="space-y-4">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="font-medium">Email Notifications</h3>
                                        <p class="text-sm text-gray-500">Receive notifications via email</p>
                                    </div>
                                    <input type="checkbox" @bind="emailNotifications" class="rounded" />
                                </div>
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="font-medium">Push Notifications</h3>
                                        <p class="text-sm text-gray-500">Receive notifications in your browser</p>
                                    </div>
                                    <input type="checkbox" @bind="pushNotifications" class="rounded" />
                                </div>
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="font-medium">New Follower Alerts</h3>
                                        <p class="text-sm text-gray-500">Get notified when someone follows you</p>
                                    </div>
                                    <input type="checkbox" @bind="followerAlerts" class="rounded" />
                                </div>
                                <div class="flex justify-end">
                                    <button @onclick="SaveNotificationSettings" 
                                            class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors">
                                        Save Settings
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private UserProfile? profile;
    private bool loading = true;
    private string activeTab = "profile";
    
    // Notification settings
    private bool emailNotifications = true;
    private bool pushNotifications = true;
    private bool followerAlerts = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        try
        {
            loading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                profile = await SupabaseService.GetUserProfileById(userId);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading profile: {ex.Message}");
            ToastService.ShowError("Failed to load profile");
        }
        finally
        {
            loading = false;
        }
    }

    private Task SaveProfile()
    {
        if (profile == null) return Task.CompletedTask;

        try
        {
            profile.UpdatedAt = DateTime.UtcNow;
            // Note: You'll need to add an UpdateProfile method to your SupabaseService
            // await SupabaseService.UpdateProfile(profile);
            ToastService.ShowSuccess("Profile updated successfully");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving profile: {ex.Message}");
            ToastService.ShowError("Failed to save profile");
        }
        
        return Task.CompletedTask;
    }

    private Task SaveNotificationSettings()
    {
        try
        {
            // Note: You'll need to implement notification settings storage
            ToastService.ShowSuccess("Notification settings saved");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving notification settings: {ex.Message}");
            ToastService.ShowError("Failed to save notification settings");
        }
        
        return Task.CompletedTask;
    }

    private Task DeleteAccount()
    {
        // Note: Implement account deletion logic
        ToastService.ShowError("Account deletion not implemented yet");
        return Task.CompletedTask;
    }

    private void SetProfileTab()
    {
        activeTab = "profile";
    }

    private void SetAccountTab()
    {
        activeTab = "account";
    }

    private void SetNotificationsTab()
    {
        activeTab = "notifications";
    }

    private string GetTabClass(bool isActive)
    {
        var baseClass = "w-full text-left px-4 py-3 text-sm font-medium rounded-md transition-colors";
        return isActive
            ? $"{baseClass} bg-blue-50 text-blue-700 border border-blue-200"
            : $"{baseClass} text-gray-600 hover:text-gray-900 hover:bg-gray-50";
    }
} 