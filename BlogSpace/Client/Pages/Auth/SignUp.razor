@page "/signup"
@using BlogSpace.Client.Services
@using BlogSpace.Client.Auth
@using System.ComponentModel.DataAnnotations
@using Supabase.Gotrue.Exceptions
@inject ISupabaseService SupabaseService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Create your account
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
            Or
            <a href="/signin" class="font-medium text-blue-600 hover:text-blue-500">
                sign in to your account
            </a>
        </p>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <EditForm Model="@model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">
                            Email address
                        </label>
                        <div class="mt-1">
                            <InputText id="email"
                                       @bind-Value="model.Email"
                                       type="email"
                                       required
                                       class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        </div>
                        <ValidationMessage For="@(() => model.Email)" class="mt-2 text-sm text-red-600" />
                    </div>

                    <div>
                        <label for="username" class="block text-sm font-medium text-gray-700">
                            Username
                        </label>
                        <div class="mt-1">
                            <InputText id="username"
                                       @bind-Value="model.Username"
                                       required
                                       class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        </div>
                        <ValidationMessage For="@(() => model.Username)" class="mt-2 text-sm text-red-600" />
                    </div>

                    <div>
                        <label for="fullName" class="block text-sm font-medium text-gray-700">
                            Full Name
                        </label>
                        <div class="mt-1">
                            <InputText id="fullName"
                                       @bind-Value="model.FullName"
                                       required
                                       class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        </div>
                        <ValidationMessage For="@(() => model.FullName)" class="mt-2 text-sm text-red-600" />
                    </div>

                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700">
                            Password
                        </label>
                        <div class="mt-1">
                            <InputText id="password"
                                       @bind-Value="model.Password"
                                       type="password"
                                       required
                                       class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        </div>
                        <ValidationMessage For="@(() => model.Password)" class="mt-2 text-sm text-red-600" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="text-red-600 text-sm">@errorMessage</div>
                    }

                    <div>
                        <button type="submit"
                                disabled="@loading"
                                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50">
                            @if (loading)
                            {
                                <span class="inline-block animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></span>
                            }
                            Sign up
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private class SignUpModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters")]
        [RegularExpression(@"^[a-zA-Z0-9_-]+$", ErrorMessage = "Username can only contain letters, numbers, underscores, and hyphens")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Full name is required")]
        [MinLength(2, ErrorMessage = "Full name must be at least 2 characters")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }

    private SignUpModel model = new();
    private bool loading;
    private string? errorMessage;

    private async Task HandleSubmit()
    {
        try
        {
            loading = true;
            errorMessage = null;

            await SupabaseService.SignUp(model.Email, model.Password, model.Username, model.FullName);
            ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationStateChanged();

            NavigationManager.NavigateTo("/");
        }
        catch (GotrueException ex)
        {
            if (ex.Message.Contains("user_already_exists") || ex.Message.Contains("User already registered"))
            {
                errorMessage = "An account with this email already exists. Please log in instead.";
            }
            else if (ex.Message.Contains("Password should be at least"))
            {
                errorMessage = "Password is too weak. Please choose a stronger password.";
            }
            else if (ex.Message.Contains("Invalid email"))
            {
                errorMessage = "Please enter a valid email address.";
            }
            else
            {
                errorMessage = "Signup failed: " + ex.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Unexpected error: " + ex.Message;
        }
        finally
        {
            loading = false;
        }
    }
}
