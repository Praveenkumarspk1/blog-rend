@page "/post/{Slug}"
@using BlogSpace.Client.Services
@using BlogSpace.Client.Models
@using Markdig
@inject ISupabaseService SupabaseService
@inject NavigationManager NavigationManager

<div class="max-w-4xl mx-auto">
    @if (loading)
    {
        <div class="animate-pulse">
            <div class="h-8 bg-gray-300 rounded w-1/4 mb-6"></div>
            <div class="h-12 bg-gray-300 rounded w-3/4 mb-4"></div>
            <div class="flex items-center space-x-4 mb-8">
                <div class="w-12 h-12 bg-gray-300 rounded-full"></div>
                <div class="space-y-2">
                    <div class="h-4 bg-gray-300 rounded w-24"></div>
                    <div class="h-3 bg-gray-300 rounded w-16"></div>
                </div>
            </div>
            <div class="space-y-4">
                <div class="h-4 bg-gray-300 rounded w-full"></div>
                <div class="h-4 bg-gray-300 rounded w-full"></div>
                <div class="h-4 bg-gray-300 rounded w-3/4"></div>
            </div>
        </div>
    }
    else if (post == null)
    {
        <div class="text-center py-12">
            <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-exclamation-circle h-12 w-12 text-gray-400"></i>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Post not found</h3>
            <p class="text-gray-600 mb-6">The post you're looking for doesn't exist or has been removed.</p>
            <a href="/" class="text-blue-600 hover:text-blue-700 font-medium">
                <i class="fas fa-arrow-left mr-2"></i>
                Back to Home
            </a>
        </div>
    }
    else
    {
        <div>
            <!-- Back Button -->
            <a href="/" class="inline-flex items-center text-gray-600 hover:text-blue-600 mb-8">
                <i class="fas fa-arrow-left mr-2"></i>
                Back to Posts
            </a>

            <!-- Post Header -->
            <header class="mb-8">
                <h1 class="text-4xl font-bold text-gray-900 mb-4">@post.Title</h1>
                
                <!-- Author Info -->
                <div class="flex items-center space-x-4">
                    <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                        @if (!string.IsNullOrEmpty(author?.AvatarUrl))
                        {
                            <img src="@author.AvatarUrl"
                                 alt="@author.FullName"
                                 class="w-12 h-12 rounded-full object-cover" />
                        }
                        else
                        {
                            <i class="fas fa-user h-6 w-6 text-white"></i>
                        }
                    </div>
                    <div>
                        <a href="/profile/@author?.Username"
                           class="font-semibold text-gray-900 hover:text-blue-600 block">
                            @(author?.FullName ?? "Unknown Author")
                        </a>
                        <div class="flex items-center space-x-2 text-sm text-gray-500">
                            <i class="fas fa-calendar h-3 w-3"></i>
                            <span>@GetTimeAgo(post.CreatedAt)</span>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Tags -->
            @if (post.Tags?.Any() == true)
            {
                <div class="flex flex-wrap gap-2 mb-8">
                    @foreach (var tag in post.Tags)
                    {
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            <i class="fas fa-tag h-3 w-3 mr-1"></i>
                            @tag
                        </span>
                    }
                </div>
            }

            <!-- Post Content -->
            <article class="prose prose-lg max-w-none">
                @((MarkupString)RenderMarkdown(post.Content))
            </article>

            <!-- Post Footer -->
            <footer class="mt-12 pt-8 border-t border-gray-200">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-6">
                        <button @onclick="ToggleLike"
                                class="@GetLikeButtonClass()">
                            <i class="@GetLikeIconClass() h-5 w-5"></i>
                            <span>@(liked ? "25" : "24") likes</span>
                        </button>
                        <button class="flex items-center space-x-2 text-gray-500 hover:text-blue-600 transition-colors">
                            <i class="fas fa-comment h-5 w-5"></i>
                            <span>8 comments</span>
                        </button>
                    </div>
                    <div class="text-sm text-gray-500">
                        @(new Random().Next(100, 1000)) views
                    </div>
                </div>
            </footer>
        </div>
    }
</div>

@code {
    [Parameter] public string Slug { get; set; } = null!;

    private Post? post;
    private UserProfile? author;
    private bool loading = true;
    private bool liked;

    protected override async Task OnInitializedAsync()
    {
        await LoadPost();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (post?.Slug != Slug)
        {
            await LoadPost();
        }
    }

    private async Task LoadPost()
    {
        try
        {
            loading = true;
            post = await SupabaseService.GetPostBySlug(Slug);
            
            if (post != null && !string.IsNullOrEmpty(post.AuthorId))
            {
                try
                {
                    author = await SupabaseService.GetUserProfileById(post.AuthorId);
                }
                catch
                {
                    // Author not found, will show "Unknown Author"
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading post: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void ToggleLike()
    {
        liked = !liked;
    }

    private string GetLikeButtonClass()
    {
        return $"flex items-center space-x-2 transition-colors {(liked ? "text-red-600" : "text-gray-500 hover:text-red-600")}";
    }

    private string GetLikeIconClass()
    {
        return $"fas fa-heart {(liked ? "text-red-600" : "")}";
    }

    private string GetTimeAgo(DateTime date)
    {
        var span = DateTime.UtcNow - date;
        
        if (span.TotalDays > 365)
            return $"{(int)(span.TotalDays / 365)} year{((int)(span.TotalDays / 365) == 1 ? "" : "s")} ago";
        if (span.TotalDays > 30)
            return $"{(int)(span.TotalDays / 30)} month{((int)(span.TotalDays / 30) == 1 ? "" : "s")} ago";
        if (span.TotalDays > 7)
            return $"{(int)(span.TotalDays / 7)} week{((int)(span.TotalDays / 7) == 1 ? "" : "s")} ago";
        if (span.TotalDays >= 1)
            return $"{(int)span.TotalDays} day{((int)span.TotalDays == 1 ? "" : "s")} ago";
        if (span.TotalHours >= 1)
            return $"{(int)span.TotalHours} hour{((int)span.TotalHours == 1 ? "" : "s")} ago";
        if (span.TotalMinutes >= 1)
            return $"{(int)span.TotalMinutes} minute{((int)span.TotalMinutes == 1 ? "" : "s")} ago";
        
        return "just now";
    }

    private string RenderMarkdown(string markdown)
    {
        if (string.IsNullOrWhiteSpace(markdown))
        {
            return string.Empty;
        }

        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build();

        return Markdown.ToHtml(markdown, pipeline);
    }
} 